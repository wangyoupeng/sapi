
const redis = require('../libs/redis');

// 应用 / 路由级别 Redis 缓存中间件
// 注意不要重复注册
async function cacheMiddleware(ctx, next) {
  ctx.request.body
  ctx.query
  ctx.params
  const bodyParams = { ... ctx.request.body || {}}
  const cacheKey = `cache_${ctx.url}_${JSON.stringify(bodyParams)}`;
  // 尝试从 Redis 中获取缓存数据
  const cacheData = await redis.get(cacheKey)
  if (cacheData && false) {
    // 如果有缓存数据，则直接返回缓存数据
    console.log('---11----',cacheData)
    ctx.body = JSON.parse(cacheData);
  } else {
    // 否则，执行下一个中间件
    console.log('---22----')
    await next();
    console.log('---33----')
    // 将响应结果存储到缓存中，设置过期时间为 1 小时
    await redis.setValueWithExpire(cacheKey, JSON.stringify(ctx.body), 3600)
  }
}

module.exports = cacheMiddleware
